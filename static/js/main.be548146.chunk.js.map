{"version":3,"sources":["components/burger/burger.js","App.js","serviceWorker.js","index.js"],"names":["Burger","props","state","lettuce","tomato","cheese","meat","action","ingredient","stateValue","this","setState","burger","index","push","key","length","className","makeBurger","onClick","addRemoveIngredient","bind","Component","App","React","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"6SAyHeA,G,wDArHX,WAAYC,GAAO,IAAD,8BACd,cAAMA,IAEDC,MAAQ,CACTC,QAAS,EACTC,OAAQ,EACRC,OAAQ,EACRC,KAAM,GAPI,E,gEAWEC,EAAQC,GAAY,IAQhCC,EAR+B,EAM/BC,KAAKR,MAJLC,EAF+B,EAE/BA,QACAC,EAH+B,EAG/BA,OACAC,EAJ+B,EAI/BA,OACAC,EAL+B,EAK/BA,KAKJ,OAAOE,GACH,IAAK,UACDC,EAAaN,EACb,MAEJ,IAAK,SACDM,EAAaL,EACb,MAEJ,IAAK,SACDK,EAAaJ,EACb,MAEJ,IAAK,OACDI,EAAaH,EAMP,QAAXC,EACCE,GAA0B,EAE1BA,GAA0B,EAG9BC,KAAKC,SAAL,eACKH,EAAcC,EAAa,EAAIA,EAAa,M,mCAcjD,IAVS,IAAD,EAMJC,KAAKR,MAJLC,EAFI,EAEJA,QACAC,EAHI,EAGJA,OACAC,EAJI,EAIJA,OACAC,EALI,EAKJA,KAGAM,EAAS,GAELC,EAAQ,EAAGA,EAAQV,EAASU,IAChCD,EAAOE,KAAK,yBAAKC,IAAKH,EAAOI,OAAQC,UAAU,kBAGnD,IAAI,IAAIJ,EAAQ,EAAGA,EAAQT,EAAQS,IAC/BD,EAAOE,KAAK,yBAAKC,IAAKH,EAAOI,OAAQC,UAAU,iBAGnD,IAAI,IAAIJ,EAAQ,EAAGA,EAAQR,EAAQQ,IAC/BD,EAAOE,KAAK,yBAAKC,IAAKH,EAAOI,OAAQC,UAAU,iBAGnD,IAAI,IAAIJ,EAAQ,EAAGA,EAAQP,EAAMO,IAC7BD,EAAOE,KAAK,yBAAKC,IAAKH,EAAOI,OAAQC,UAAU,eAInD,OAAOL,I,+BAIP,OACI,kBAAC,WAAD,KACI,yBAAKK,UAAU,eACX,yBAAKA,UAAU,aACVP,KAAKQ,aACV,yBAAKD,UAAU,iBAEnB,yBAAKA,UAAU,4BACX,sCACA,yBAAKA,UAAU,yBACX,4BAAQA,UAAU,iBAAiBE,QAAST,KAAKU,oBAAoBC,KAAKX,KAAM,MAAO,YAAvF,OACA,4BAAQO,UAAU,iBAAiBE,QAAST,KAAKU,oBAAoBC,KAAKX,KAAM,SAAU,YAA1F,WAEJ,qCACA,yBAAKO,UAAU,yBACX,4BAAQA,UAAU,iBAAiBE,QAAST,KAAKU,oBAAoBC,KAAKX,KAAM,MAAO,WAAvF,OACA,4BAAQO,UAAU,iBAAiBE,QAAST,KAAKU,oBAAoBC,KAAKX,KAAM,SAAU,WAA1F,WAEJ,qCACA,yBAAKO,UAAU,yBACX,4BAAQA,UAAU,iBAAiBE,QAAST,KAAKU,oBAAoBC,KAAKX,KAAM,MAAO,WAAvF,OACA,4BAAQO,UAAU,iBAAiBE,QAAST,KAAKU,oBAAoBC,KAAKX,KAAM,SAAU,WAA1F,WAEJ,mCACA,yBAAKO,UAAU,yBACX,4BAAQA,UAAU,iBAAiBE,QAAST,KAAKU,oBAAoBC,KAAKX,KAAM,MAAO,SAAvF,OACA,4BAAQO,UAAU,iBAAiBE,QAAST,KAAKU,oBAAoBC,KAAKX,KAAM,SAAU,SAA1F,iB,GA9GHY,cCaNC,E,uKARX,OACE,yBAAKN,UAAU,kBACb,kBAAC,EAAD,W,GALUO,IAAMF,WCOJG,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.be548146.chunk.js","sourcesContent":["import React, {Component, Fragment} from 'react'\nimport './burger.css'\n\nclass Burger extends Component{\n    constructor(props){\n        super(props)\n\n        this.state = {\n            lettuce: 0,\n            tomato: 0,\n            cheese: 0,\n            meat: 0\n        }\n    }\n\n    addRemoveIngredient(action, ingredient){\n        let {\n            lettuce,\n            tomato,\n            cheese,\n            meat\n        } = this.state;\n\n        let stateValue;\n\n        switch(ingredient){\n            case 'lettuce':{\n                stateValue = lettuce;\n                break;\n            }\n            case 'tomato':{\n                stateValue = tomato;\n                break;\n            }\n            case 'cheese':{\n                stateValue = cheese;\n                break;\n            }\n            case 'meat':{\n                stateValue = meat;\n                break;\n            }\n            default: break;\n        }\n\n        if(action === 'add'){\n            stateValue = stateValue + 1;\n        }else{\n            stateValue = stateValue - 1;\n        }\n\n        this.setState({\n            [ingredient] : stateValue > 0 ? stateValue : 0\n        })\n    }\n\n    makeBurger(){\n        let {\n            lettuce,\n            tomato,\n            cheese,\n            meat\n        } = this.state;\n\n        let burger = [];\n\n        for(let index = 0; index < lettuce; index++){\n            burger.push(<div key={burger.length} className=\"lettuce-side\"></div>)\n        }\n\n        for(let index = 0; index < tomato; index++){\n            burger.push(<div key={burger.length} className=\"tomato-side\"></div>)\n        }\n\n        for(let index = 0; index < cheese; index++){\n            burger.push(<div key={burger.length} className=\"cheese-side\"></div>)\n        }\n\n        for(let index = 0; index < meat; index++){\n            burger.push(<div key={burger.length} className=\"meat-side\"></div>)\n        }\n\n\n        return burger;\n    }\n\n    render(){\n        return (\n            <Fragment>\n                <div className=\"burger-view\">\n                    <div className=\"top-side\"></div>\n                        {this.makeBurger()}\n                    <div className=\"bottom-side\"></div>\n                </div>\n                <div className=\"burger-ingredients-block\">\n                    <p>Lettuce</p>\n                    <div className=\"ingredients-btn-group\">\n                        <button className=\"ingredient-btn\" onClick={this.addRemoveIngredient.bind(this, 'add', 'lettuce')}>ADD</button>\n                        <button className=\"ingredient-btn\" onClick={this.addRemoveIngredient.bind(this, 'remove', 'lettuce')}>REMOVE</button>\n                    </div>\n                    <p>Tomato</p>\n                    <div className=\"ingredients-btn-group\">\n                        <button className=\"ingredient-btn\" onClick={this.addRemoveIngredient.bind(this, 'add', 'tomato')}>ADD</button>\n                        <button className=\"ingredient-btn\" onClick={this.addRemoveIngredient.bind(this, 'remove', 'tomato')}>REMOVE</button>\n                    </div>\n                    <p>Cheese</p>\n                    <div className=\"ingredients-btn-group\">\n                        <button className=\"ingredient-btn\" onClick={this.addRemoveIngredient.bind(this, 'add', 'cheese')}>ADD</button>\n                        <button className=\"ingredient-btn\" onClick={this.addRemoveIngredient.bind(this, 'remove', 'cheese')}>REMOVE</button>\n                    </div>\n                    <p>Meat</p>\n                    <div className=\"ingredients-btn-group\">\n                        <button className=\"ingredient-btn\" onClick={this.addRemoveIngredient.bind(this, 'add', 'meat')}>ADD</button>\n                        <button className=\"ingredient-btn\" onClick={this.addRemoveIngredient.bind(this, 'remove', 'meat')}>REMOVE</button>\n                    </div>\n                </div>\n            </Fragment>\n        )\n    }\n}\n\nexport default Burger","import React from 'react';\nimport './App.css';\nimport Burger from './components/burger/burger'\n\n\nclass App extends React.Component{\n\n  render(){\n    return (\n      <div className=\"burger-content\">\n        <Burger />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}